import React, { useContext, useEffect, useState } from "react";
import Location from "components/Location/Location";
import { locationPath } from "constants/locationPath";
import { PageContext } from "components/PageProvider";
import ApprovalFormSal from "components/form/ApprovalFormSal";
import HideCard from "components/HideCard";
import RefreshButton from "components/button/RefreshButton";
import ReactDataTableURL from "components/DataTable/ReactDataTableURL";
import { columns } from "constants/columns";
import SaveButton from "components/button/SaveButton";
import AddButton from "components/button/AddButton";
import DelButton from "components/button/DelButton";
import ReactDataTable from "components/DataTable/ReactDataTable";
import { axiosDelete, axiosFetch, axiosPost, axiosUpdate } from "api/axiosFetch";
import SearchModal from "components/modal/SearchModal";
import ReactDataTablePdorder from "components/DataTable/ReactDataTablePdorder";
import PopupButton from "components/button/PopupButton";
import URL from "constants/url";

/** ÏòÅÏóÖÍ¥ÄÎ¶¨-Í≤¨Ï†ÅÏÑúÍ¥ÄÎ¶¨ */
function Quotation() {
    const { currentPageName, innerPageName, setPrevInnerPageName, setInnerPageName, setCurrentPageName, setNameOfButton } = useContext(PageContext);
    const [infoList, setInfoList] = useState([
        { name: "Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ", id: "estimateLabor" },
        { name: "Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ", id: "orderBuying" },
    ]);
    const [condition, setCondition] = useState({});
    const [isOpenSearch, setIsOpenSearch] = useState(false);
    const [selectedRows, setSelectedRows] = useState([]); //Í∑∏Î¶¨ÎìúÏóêÏÑú ÏÑ†ÌÉùÎêú row Îç∞Ïù¥ÌÑ∞

    const [estimate, setEstimate] = useState([]);
    const [buyIngInfo, setBuyIngInfo] = useState([]);

    const [estimateBool, setestimateBool] = useState(false);
    const [buyIngBool, setBuyIngBool] = useState(false);

    console.log(estimateBool, buyIngBool);

    useEffect(() => {
        setInnerPageName({ name: "Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ", id: "estimateLabor" });
        setCurrentPageName({}); //innerÏôÄ pageNameÏùÄ ÎèôÏãúÏóê ÏÇ¨Ïö© X
        fetchAllData();
        return () => {};
    }, []);

    useEffect(() => {
        if (currentPageName.id === "Quotation") {
            const activeTab = document.querySelector(".mini_board_3 .tab li a.on"); //ÎßàÏßÄÎßâÏúºÎ°ú ÌôúÏÑ±Ìôî Îêú ÌÉ≠
            if (activeTab) {
                const activeTabInfo = infoList.find((data) => data.name === activeTab.textContent);
                setInnerPageName({ ...activeTabInfo });
                setCurrentPageName({});
                fetchAllData();
            }
        }
    }, [currentPageName]);

    useEffect(() => {
        // console.log("üéÑinnerPageName:",innerPageName.id, ",", innerPageName.name);
        if (innerPageName.id === "estimateLabor") {
            fetchAllData();
        }
    }, [innerPageName]);

    const changeTabs = (name, id) => {
        setInnerPageName((prev) => {
            setPrevInnerPageName({ ...prev });
            return { name, id };
        });
        setCurrentPageName({});
    };

    const refresh = () => {
        console.log("Î¶¨ÌîÑÎûòÏâ¨ ÏôúÏïàÌï®");
        if (condition.poiId && condition.versionId) {
            fetchAllData(condition);
        } else {
            fetchAllData();
        }
    };

    function mergeObjects(data) {
        data.sort((a, b) => a.estId - b.estId);
        // Í∞ùÏ≤¥Ïùò ÌÇ§Î•º Î™®ÏïÑÎëò Set
        let keysSet = new Set();

        // Í∞ùÏ≤¥Îì§Ïùò ÌÇ§Î•º ÌôïÏù∏ÌïòÎ©¥ÏÑú Ï§ëÎ≥µÎêú ÌÇ§Îäî Ï†ÄÏû•ÌïòÏßÄ ÏïäÏùå
        data.forEach((obj) => {
            Object.keys(obj).forEach((key) => {
                if (key !== "estId") {
                    keysSet.add(key);
                }

                // estMm1, estMm2, estMm3 Í∞í Ï§ëÎ≥µ ÌôïÏù∏
                if (key.startsWith("estMm") && !window["unique" + key]) {
                    window["unique" + key] = obj[key];
                }
            });
        });

        // Ï§ëÎ≥µÎêòÏßÄ ÏïäÎäî ÌÇ§Îì§ÏùÑ Í∞ÄÏßÑ Í∞ùÏ≤¥Î•º ÏÉùÏÑ±
        let result = {};
        keysSet.forEach((key) => {
            result[key] = data[0][key];
        });

        // Ï§ëÎ≥µÎêòÏßÄ ÏïäÎäî estMm ÏÜçÏÑ±Îì§ÏùÑ Ï†ÄÏû•
        for (let i = 1; i <= 24; i++) {
            let key = "estMm" + i;
            if (window["unique" + key]) {
                result[key] = window["unique" + key];
            }
        }

        // estId Í∞íÏùÑ Î∞∞Ïó¥Î°ú Ï†ÄÏû•
        result["estIdList"] = data.map((obj) => obj["estId"]);

        // ÏµúÏ¢Ö Í≤∞Í≥ºÎ•º Î∞∞Ïó¥Î°ú Í∞êÏã∏ÏÑú Î∞òÌôò
        return [result];
    }

    //const processResultData = (resultData) => {
    //    const newData = resultData.map((item, index) => {
    //        // ÏÉàÎ°úÏö¥ Í∞ùÏ≤¥Î•º ÎßåÎì§Ïñ¥ÏÑú Í∏∞Ï°¥ Í∞ùÏ≤¥Ïùò ÏÜçÏÑ±Îì§ÏùÑ Î≥µÏÇ¨
    //        const newItem = { ...item };

    //        // estMm Îí§Ïóê indexÎ•º Î∂ôÏó¨ÏÑú ÏÉàÎ°úÏö¥ ÏÜçÏÑ±ÏùÑ Ï∂îÍ∞Ä
    //        newItem[`estMm${index + 1}`] = item.estMm;
    //        delete newItem.estMm;
    //        delete newItem.estMonth;

    //        return newItem;
    //    });
    //    return newData;
    //};

    //estMonth(Ïõî Ïà´ÏûêÎ•º ÏûòÎùºÎã§Í∞Ä ÏÉàÎ°≠Í≤å estMmÏùÑ ÎßåÎì¶)
    const updateEstMmProperty = (data) => {
        data.forEach((item) => {
            const estMonth = item.estMonth;
            if (estMonth) {
                //const paddedMonth = estMonth;
                item[`estMm${estMonth}`] = item.estMm;
            }
        });
        return data;
    };

    const processResultData = (resultData, condition) => {
        console.log(resultData, "Ï≤òÏùåÎ∞õÎäîÍ∞íÏù∏Îç∞");
        const changeDD = updateEstMmProperty(resultData);
        console.log(changeDD, "Î∞îÎÄîÍπå?");
        const transformedData = changeDD.reduce((accumulator, item) => {
            const {
                estId,
                estMm,
                estPosition,
                estUnitPrice,
                pgId,
                pgNm,
                pdiId,
                poiNm,
                pdiNm,
                pdiUnit,
                estDesc,
                estMm1,
                estMm2,
                estMm3,
                estMm4,
                estMm5,
                estMm6,
                estMm7,
                estMm8,
                estMm9,
                estMm10,
                estMm11,
                estMm12,
                estMm13,
                estMm14,
                estMm15,
                estMm16,
                estMm17,
                estMm18,
                estMm19,
                estMm20,
                estMm21,
                estMm22,
                estMm23,
                estMm24,
            } = item;

            const key = `${pdiNm}_${estPosition}`;
            if (!accumulator[key]) {
                accumulator[key] = {
                    estMm,
                    estPosition,
                    estUnitPrice,
                    pgId,
                    pdiId,
                    poiNm,
                    pdiNm,
                    pgNm,
                    pdiUnit,
                    estDesc,
                    estMm1,
                    estMm2,
                    estMm3,
                    estMm4,
                    estMm5,
                    estMm6,
                    estMm7,
                    estMm8,
                    estMm9,
                    estMm10,
                    estMm11,
                    estMm12,
                    estMm13,
                    estMm14,
                    estMm15,
                    estMm16,
                    estMm17,
                    estMm18,
                    estMm19,
                    estMm20,
                    estMm21,
                    estMm22,
                    estMm23,
                    estMm24,
                    estId: [],
                };
            }

            accumulator[key].estId.push(estId);
            accumulator[key].estId.sort((a, b) => a - b);

            for (let i = 1; i <= 24; i++) {
                const estMmKey = `estMm${i}`;
                if (item[estMmKey] !== undefined) {
                    accumulator[key][estMmKey] = item[estMmKey];
                }
            }

            return accumulator;
        }, []);
        console.log(transformedData, "transformedData");
        //Ïó¨Í∏∞ÍπåÏßÄÍ∞ÄÌÜµÌï©

        // mergedData ÏóêÏÑú Îã§Ïãú tableDataÏóêÏì∏ Î∞∞Ïó¥Î°ú Ïû¨Ï†ïÏùò
        const mergedData = Object.values(transformedData).map((mergedItem, index) => {
            const newObj = {};
            console.log(mergedItem, "Ïù¥Í±∞Î®∏ÎçîÎùº");
            newObj["estIdList"] = mergedItem.estId;
            newObj["estMm"] = mergedItem.estMm;
            newObj["estPosition"] = mergedItem.estPosition;
            newObj["estUnitPrice"] = mergedItem.estUnitPrice;
            newObj["pgId"] = mergedItem.pgId;
            newObj["pdiId"] = mergedItem.pdiId;
            newObj["pdiNm"] = mergedItem.pdiNm;
            newObj["pjbgDt"] = mergedItem.pjbgBeginDt;
            newObj["pgNm"] = mergedItem.pgNm;
            newObj["pdiUnit"] = mergedItem.pdiUnit;
            newObj["poiNm"] = mergedItem.poiNm;
            newObj["estDesc"] = mergedItem.estDesc;
            newObj["estMm1"] = mergedItem.estMm1;
            newObj["estMm2"] = mergedItem.estMm2;
            newObj["estMm3"] = mergedItem.estMm3;
            newObj["estMm4"] = mergedItem.estMm4;
            newObj["estMm5"] = mergedItem.estMm5;
            newObj["estMm6"] = mergedItem.estMm6;
            newObj["estMm7"] = mergedItem.estMm7;
            newObj["estMm8"] = mergedItem.estMm8;
            newObj["estMm9"] = mergedItem.estMm9;
            newObj["estMm10"] = mergedItem.estMm10;
            newObj["estMm11"] = mergedItem.estMm11;
            newObj["estMm12"] = mergedItem.estMm12;
            newObj["estMm13"] = mergedItem.estMm13;
            newObj["estMm14"] = mergedItem.estMm14;
            newObj["estMm15"] = mergedItem.estMm15;
            newObj["estMm16"] = mergedItem.estMm16;
            newObj["estMm17"] = mergedItem.estMm17;
            newObj["estMm18"] = mergedItem.estMm18;
            newObj["estMm19"] = mergedItem.estMm19;
            newObj["estMm20"] = mergedItem.estMm20;
            newObj["estMm21"] = mergedItem.estMm21;
            newObj["estMm22"] = mergedItem.estMm22;
            newObj["estMm23"] = mergedItem.estMm23;
            newObj["estMm24"] = mergedItem.estMm24;
            newObj["poiId"] = condition.poiId;
            newObj["versionId"] = condition.versionId;
            let total = 0;
            for (let j = 1; j <= 24; j++) {
                const propName = `estMm${j}`;
                if (mergedItem[propName] !== null) {
                    total += mergedItem[propName];
                }
            }

            newObj["total"] = total;
            newObj["price"] = total * mergedItem.estUnitPrice;

            return newObj;
        });
        console.log(mergedData);
        return mergedData;
    };

    const fetchAllData = async (condition) => {
        //const requestSearch = {
        //    poiId: condition.poiId,
        //    useAt: "Y",
        //};
        if (innerPageName.name === "Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ") {
            const resultData = await axiosFetch("/api/estimate/personnel/estimateCostMM/totalListAll.do", condition || {});
            console.log(resultData, "Ìì®Ïñ¥ Îç∞Ïù¥ÌÑ∞");
            setEstimate([]);
            setestimateBool(false);
            if (resultData.length !== 0) {
                const result = processResultData(resultData, condition);
                console.log(result, "Ìï®ÏàòÍ±∞ÏπòÍ≥† ÎÇúÍ±∞");
                //const formatData = mergeObjects(result);
                setEstimate(result);
                setestimateBool(true);
            }
        } else if (innerPageName.name === "Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ") {
            console.log("Ïó¨Í∏∞ÌÉÄÎäîÏßÄ Î¥êÏïºÌï¥");
            setBuyIngInfo([]);
            setBuyIngBool(false);
            const resultData = await axiosFetch("/api/estimate/buy/estCostBuy/totalListAll.do", condition || {});
            if (resultData.length !== 0) {
                console.log(resultData, "Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ");
                setBuyIngInfo(resultData);
                setBuyIngBool(true);
            }
        }
        //const resultDa2 = await axiosFetch("/api/estimate/personnel/estimateCostMM/totalListAll.do", requestSearch);
        //const filteredData = filterData(updatedData);
    };

    const returnList = (originTableData, tableData) => {
        if (innerPageName.name === "Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ") {
            compareData(originTableData, tableData);
        } else if (innerPageName.name === "Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ") {
            console.log("Ïù¥Í±∞ÏïàÌÉÄÎÇòÎ∞î");
            compareData2(originTableData, tableData);
        }
    };

    const compareData = (originData, updatedData) => {
        console.log("Í∞úÎ∞úÏö© originData", originData);
        console.log("Í∞úÎ∞úÏö© updatedData", updatedData);

        const filterData = updatedData.filter((data) => data.poiId); //pmpMonthÍ∞Ä ÏóÜÎäî Îç∞Ïù¥ÌÑ∞ Ï†úÏô∏
        const originDataLength = originData ? originData.length : 0;
        const updatedDataLength = filterData ? filterData.length : 0;
        console.log("Ïó¨Í∏∞ÌÉê Í∞úÎ∞úÏô∏Ï£º ÏàòÏ†ï?", updatedData);
        console.log("updatedDataLength?", updatedDataLength);

        if (originDataLength > updatedDataLength) {
            //Ïù¥Ï†Ñ idÍ∞íÏùÄ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÎÇòÎ®∏ÏßÄ Í∞íÎßå Î≥ÄÍ≤ΩÌï¥Ï£ºÎäî Ìï®Ïàò
            const updateDataInOrigin = (originData, updatedData) => {
                // Î≥µÏ†úÌïòÏó¨ ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ ÏÉùÏÑ±
                const updatedArray = [...originData];
                // updatedDataÏùò Í∏∏Ïù¥ÎßåÌÅº Î∞òÎ≥µÌïòÏó¨ originData Í∞±Ïã†
                for (let i = 0; i < Math.min(updatedData.length, originData.length); i++) {
                    const updatedItem = updatedData[i];
                    updatedArray[i] = { ...updatedItem, estIdList: updatedArray[i].estIdList };
                }
                return updatedArray;
            };

            const firstRowUpdate = updateDataInOrigin(originData, updatedData);
            updateItem(firstRowUpdate); //ÏàòÏ†ï

            const originAValues = originData.map((item) => item.estIdList); //ÏÇ≠Ï†úÌï† id Ï∂îÏ∂ú
            console.log(originAValues);
            const extraOriginData = originAValues.slice(updatedDataLength);
            console.log(extraOriginData);

            const flatArray = extraOriginData.flat(); //Ï§ëÏ≤©Î∞∞Ïó¥ Í≥†Î•¥Í≤åÎßåÎì¶

            const delList = [];
            const delListTest = [];
            for (let i = updatedDataLength; i < originDataLength; i++) {
                delList.push(originData[i].estIdList);
                delListTest.push(originData[i]);
            }
            console.log(flatArray);
            console.log(delList);
            console.log(delListTest);

            deleteItem(flatArray); //ÏÇ≠Ï†ú
        } else if (originDataLength === updatedDataLength) {
            console.log(filterData, "Ïù¥Í±∏Î°úÌï¥ÏïºÌòÄÎäîÎîî");
            updateItem(filterData); //ÏàòÏ†ï
        } else if (originDataLength < updatedDataLength) {
            const updateList = [];

            for (let i = 0; i < originDataLength; i++) {
                updateList.push(filterData[i]);
            }
            console.log("Ïó¨Í∏¥Í∞Ä?3");
            updateItem(updateList); //ÏàòÏ†ï

            const addLists = [];

            for (let i = originDataLength; i < updatedDataLength; i++) {
                const addList = { ...filterData[i] };
                addList.poiId = condition.poiId;
                addList.versionId = condition.versionId;
                addLists.push(addList);
            }
            addItem(addLists); //Ï∂îÍ∞Ä
        }
    };

    const compareData2 = (originData, updatedData) => {
        console.log("üéÑÍ≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ", originData, "mod:", updatedData);
        const filterData = updatedData.filter((data) => data.pdiId); //ÌïÑÏàòÍ∞í Ï≤¥ÌÅ¨

        // console.log("üéÑfilterData:", filterData);

        const originDataLength = originData ? originData.length : 0;
        const updatedDataLength = filterData ? filterData.length : 0;

        if (originDataLength > updatedDataLength) {
            //Ïù¥Ï†Ñ idÍ∞íÏùÄ Ïú†ÏßÄÌïòÎ©¥ÏÑú ÎÇòÎ®∏ÏßÄ Í∞íÎßå Î≥ÄÍ≤ΩÌï¥Ï£ºÎäî Ìï®Ïàò
            const updateDataInOrigin = (originData, filterData) => {
                // Î≥µÏ†úÌïòÏó¨ ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ ÏÉùÏÑ±
                const updatedArray = [...originData];
                // updatedDataÏùò Í∏∏Ïù¥ÎßåÌÅº Î∞òÎ≥µÌïòÏó¨ originData Í∞±Ïã†
                for (let i = 0; i < Math.min(filterData.length, originData.length); i++) {
                    const updatedItem = filterData[i];
                    updatedArray[i] = { ...updatedItem, estBuyId: updatedArray[i].estBuyId };
                }
                return updatedArray;
            };

            const firstRowUpdate = updateDataInOrigin(originData, filterData);
            updateItem2(firstRowUpdate);

            const originAValues = originData.map((item) => item.estBuyId); //ÏÇ≠Ï†úÌï† id Ï∂îÏ∂ú
            const extraOriginData = originAValues.slice(updatedDataLength);

            deleteItem2(extraOriginData);
        } else if (originDataLength === updatedDataLength) {
            updateItem2(filterData);
        } else if (originDataLength < updatedDataLength) {
            const toUpdate = [];
            for (let i = 0; i < originDataLength; i++) {
                const temp = { ...filterData[i] };
                toUpdate.push(temp);
            }
            updateItem2(toUpdate);
            const addLists = [];

            for (let i = originDataLength; i < updatedDataLength; i++) {
                const addList = { ...filterData[i] };
                addList.poiId = condition.poiId;
                addList.versionId = condition.versionId;
                addLists.push(addList);
            }
            addItem2(addLists); //Ï∂îÍ∞Ä
        }
    };

    const addItem2 = async (addData) => {
        console.log(addData, "Í≤¨Ï†Å Íµ¨Îß§ Ï∂îÍ∞ÄÎç∞Ïù¥ÌÑ∞");
        const url = `api/estimate/buy/estCostBuy/addList.do`;
        const resultData = await axiosPost(url, addData);
        console.log(resultData, "üíúÏ∂îÍ∞ÄÎêúÍ±∞ ÌôïÏù∏addItem");
        if (resultData) {
            refresh();
        }
    };

    const updateItem2 = async (toUpdate) => {
        console.log(toUpdate, "ÏóÖÎç∞Ïù¥Ìä∏ Í≤¨Ï†ÅÍµ¨Îß§ Îç∞Ïù¥ÌÑ∞Ï¢ÄÎ≥¥Ïûê!");
        const url = `/api/estimate/buy/estCostBuy/editList.do`;
        console.log(toUpdate, "üíúupdateItem");
        const resultData = await axiosUpdate(url, toUpdate);
        console.log(resultData, "Î≥ÄÍ≤ΩÎêúÍ±∞ ÎßûÏùå?");

        if (resultData) {
            refresh();
        }
    };

    const deleteItem2 = async (removeItem) => {
        console.log(removeItem, "Í≤¨Ï†Å Íµ¨Îß§ ÏÇ≠Ï†úÌï†ÎÜàÎì§");
        const url = `/api/estimate/buy/estCostBuy/removeAll.do`;
        const resultData = await axiosDelete(url, removeItem);
        console.log(resultData, "ÏßÄÏõåÏßÑÍ±∞ÎßûÏùå?");

        if (resultData) {
            refresh();
        }
    };

    const addItem = async (addData) => {
        console.log(addData, "Í≤¨Ï†Å ÏòÅÏóÖ Ï∂îÍ∞ÄÎç∞Ïù¥ÌÑ∞");
        const url = `/api/estimate/personnel/estimateCostMM/addArrayList.do`;
        const resultData = await axiosPost(url, addData);
        console.log(resultData, "üíúÏ∂îÍ∞ÄÎêúÍ±∞ ÌôïÏù∏addItem");
        if (resultData) {
            refresh();
        }
    };

    const updateItem = async (toUpdate) => {
        console.log(toUpdate, "ÏóÖÎç∞Ïù¥Ìä∏ Îç∞Ïù¥ÌÑ∞Ï¢ÄÎ≥¥Ïûê!");
        const url = `/api/estimate/personnel/estimateCostMM/editArrayList.do`;
        console.log(toUpdate, "üíúupdateItem");
        const resultData = await axiosUpdate(url, toUpdate);
        console.log(resultData, "Î≥ÄÍ≤ΩÎêúÍ±∞ ÎßûÏùå?");

        if (resultData) {
            refresh();
        }
    };

    const deleteItem = async (removeItem) => {
        console.log(removeItem, "ÏÇ≠Ï†úÌï†ÎÜàÎì§");
        const url = `/api/estimate/personnel/estimateCostMM/removeAll.do`;
        const resultData = await axiosDelete(url, removeItem);
        console.log(resultData, "ÏßÄÏõåÏßÑÍ±∞ÎßûÏùå?");

        if (resultData) {
            refresh();
        }
    };

    const conditionInfo = (value) => {
        // console.log("üéÑÏª®ÎîîÏÖò:", value);
        setCondition((prev) => {
            if (prev.poiId !== value.poiId) {
                const newCondition = { ...value };
                fetchAllData(newCondition);
                return newCondition;
            } else {
                fetchAllData({ ...prev });
                return prev;
            }
        });
    };

    return (
        <>
            <Location pathList={locationPath.Quotation} />
            <div className="common_board_style mini_board_3">
                <ul className="tab">
                    <li onClick={() => changeTabs("Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ", "estimateLabor")}>
                        <a href="#Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ" className="on">
                            Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ
                        </a>
                    </li>
                    <li onClick={() => changeTabs("Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ", "orderBuying")}>
                        <a href="#Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ">Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ</a>
                    </li>
                </ul>
                <div className="list">
                    <div className="first">
                        <ul>
                            <ApprovalFormSal returnData={conditionInfo} initial={condition} />
                            {/*<HideCard title="Ìï©Í≥Ñ" color="back-lightyellow" className="mg-b-40"></HideCard>*/}
                            <HideCard title="Í≥ÑÌöç Îì±Î°ù/ÏàòÏ†ï" color="back-lightblue">
                                <div className="table-buttons mg-t-10 mg-b-10">
                                    <PopupButton
                                        clickBtn={estimateBool}
                                        targetUrl={URL.LaborCostDoc}
                                        data={{ label: "Í≤¨ Ï†Å ÏÑú", poiId: condition.poiId, versionId: condition.versionId, tableData: estimate }}
                                    />
                                    <PopupButton
                                        clickBtn={estimateBool}
                                        targetUrl={URL.LaborSummaryDoc}
                                        data={{ label: "ÏòÅÏóÖÏÉÅÏÑ∏ÎÇ¥Ïó≠", poiId: condition.poiId, versionId: condition.versionId, tableData: estimate }}
                                    />
                                    <SaveButton label={"Ï†ÄÏû•"} onClick={() => setNameOfButton("save")} />
                                    <AddButton label={"Ï∂îÍ∞Ä"} onClick={() => setNameOfButton("addRow")} />
                                    <DelButton label={"ÏÇ≠Ï†ú"} onClick={() => setNameOfButton("deleteRow")} />
                                    <RefreshButton onClick={refresh} />
                                </div>
                                <ReactDataTableURL
                                    editing={true}
                                    columns={columns.orderPlanMgmt.estimateLabor}
                                    returnList={returnList}
                                    customDatas={estimate}
                                    viewPageName={{ name: "Í≤¨Ï†ÅÏö© Ïù∏Í±¥ÎπÑ", id: "estimateLabor" }}
                                    returnSelectRows={(data) => {
                                        setSelectedRows(data);
                                    }}
                                    customDatasRefresh={refresh}
                                    condition={condition}
                                />
                            </HideCard>
                        </ul>
                    </div>
                    <div className="second">
                        <ul>
                            <ApprovalFormSal returnData={conditionInfo} initial={condition} />
                            {/*<HideCard title="Ìï©Í≥Ñ" color="back-lightyellow" className="mg-b-40"></HideCard>*/}
                            <HideCard title="Í≥ÑÌöç Îì±Î°ù/ÏàòÏ†ï" color="back-lightblue">
                                <div className="table-buttons mg-t-10 mg-b-10">
                                    <PopupButton
                                        clickBtn={buyIngBool}
                                        targetUrl={URL.OrderBuyDoc}
                                        data={{ label: "Í≤¨ Ï†Å ÏÑú", poiId: condition.poiId, versionId: condition.versionId, tableData: buyIngInfo }}
                                    />
                                    <PopupButton
                                        clickBtn={buyIngBool}
                                        targetUrl={URL.OrderSummaryDoc}
                                        data={{ label: "Íµ¨Îß§ÏÉÅÏÑ∏ÎÇ¥Ïó≠", poiId: condition.poiId, versionId: condition.versionId, tableData: buyIngInfo }}
                                    />
                                    <SaveButton label={"Ï†ÄÏû•"} onClick={() => setNameOfButton("save")} />
                                    <AddButton label={"Ï∂îÍ∞Ä"} onClick={() => setNameOfButton("addRow")} />
                                    <DelButton label={"ÏÇ≠Ï†ú"} onClick={() => setNameOfButton("deleteRow")} />
                                    <RefreshButton onClick={refresh} />
                                </div>
                                <ReactDataTablePdorder
                                    editing={true}
                                    columns={columns.orderPlanMgmt.estimatePurchase}
                                    customDatas={buyIngInfo}
                                    returnList={returnList}
                                    viewPageName={{ name: "Í≤¨Ï†ÅÏö© Íµ¨Îß§ÎπÑ", id: "orderBuying" }}
                                    returnSelectRows={(data) => {
                                        setSelectedRows(data);
                                    }}
                                    customDatasRefresh={refresh}
                                    condition={condition}
                                />
                            </HideCard>
                        </ul>
                    </div>
                </div>
            </div>
            <SearchModal returnData={(condition) => fetchAllData(condition)} onClose={() => setIsOpenSearch(false)} isOpen={isOpenSearch} />
        </>
    );
}

export default Quotation;
